[
 {
          "id": 1,
          "body": "関数 function1 が受け取る引数と，関数 function2 が受け取る引数とが同じとき， 二つの関数は同じ値を返す。ここで，引数 n と引数 m は正の整数であり，引数 m は引 数 n よりも 10 以上大きい数とする。\n\n〔プログラム〕 \n○整数型: function1(整数型: n, 整数型: m) \n 整数型: count ← 0 \n 整数型: i \n for (iをnからmまで1ずつ増やす) \n if ((i mod 4)が0と等しい) \n count ← count ＋ 1 \n endif \nendfor \nreturn count \n\n○整数型: function2(整数型: n, 整数型: m) \n 整数型: count ← 0 \n 整数型: tempN ← n \n 整数型: i, j \n for ( )   \na \n if ((tempN mod 4)が0と等しい) \n 繰返し処理を終了する \n endif \n tempN ← tempN ＋ 1 \n endfor \nfor ( )   \nb \n count ← count ＋ 1 \nendfor \nreturn count",
          "choices": [
            {
              "text": "ア: a: iを1から2まで1ずつ増やす, b: jをnから始めてmを超えない範囲でtempNずつ増やす",
              "explanation": "不正解。条件に合致しません。"
            },
            {
              "text": "イ: a: iを1から2まで1ずつ増やす, b: jをtempNからmまで1ずつ増やす",
              "explanation": "不正解。条件に合致しません。"
            },
            {
              "text": "ウ: a: iを1から2まで1ずつ増やす, b: jをtempNから始めてmを超えない範囲で4ずつ増やす",
              "explanation": "正解。条件に合致します。"
            },
            {
              "text": "エ: a: iを1から3まで1ずつ増やす, b: jをnから始めてmを超えない範囲でtempNずつ増やす",
              "explanation": "不正解。条件に合致しません。"
            },
            {
              "text": "オ: a: iを1から3まで1ずつ増やす, b: jをtempNからmまで1ずつ増やす",
              "explanation": "不正解。条件に合致しません。"
            },
            {
              "text": "カ: a: iを1から3まで1ずつ増やす, b: jをtempNから始めてmを超えない範囲で4ずつ増やす",
              "explanation": "不正解。条件に合致しません。"
            }
          ],
          "correctChoiceIndex": 2
        },
        {
          "id": 2,
          "body": "関数 change は，10 より大きい整数を引数 n で受け取り，1 円玉，5 円玉，10 円玉 を使ってちょうど n 円にする組合せの総数を返す。 \n例えば，12 円にする組合せは，次のように数えられる。10 円玉を使わない場合に は，1 円玉と 5 円玉だけでちょうど 12 円にすることになる。その組合せは，使える 5 円玉の枚数が 0 以上 (12 ÷ 5 の商) 以下なので，(12 ÷ 5 の商) ＋ 1 ＝ 3 通りあ る。同様に，10 円玉を 1 枚使う場合には，1 円玉と 5 円玉だけでちょうど 2 円にする ことになり，その組合せは (2 ÷ 5 の商) ＋ 1 ＝ 1 通りある。10 円玉を 2 枚以上 使う組合せはない。よって，1 円玉，5 円玉，10 円玉を使ってちょうど 12 円にする 組合せは，3 ＋ 1 ＝ 4 通りである。 \n\n〔プログラム〕 \n○整数型: change(整数型: n) \n 整数型: count ← 0 \n 整数型: rest ← n \n while ( ) \n  count ← count ＋ (rest ÷ 5 の商) ＋ 1 \n  rest ← rest － 10 \n endwhile \n return count",
          "choices": [
            {
              "text": "ア: rest ≧ 0",
              "explanation": "不正解。条件に合致しません。"
            },
            {
              "text": "イ: rest ≧ 5",
              "explanation": "不正解。条件に合致しません。"
            },
            {
              "text": "ウ: rest ≧ 10",
              "explanation": "正解。条件に合致します。"
            },
            {
              "text": "エ: rest ＞ 0",
              "explanation": "不正解。条件に合致しません。"
            },
            {
              "text": "オ: rest ＞ 5",
              "explanation": "不正解。条件に合致しません。"
            },
            {
              "text": "カ: rest ＞ 10",
              "explanation": "不正解。条件に合致しません。"
            }
          ],
          "correctChoiceIndex": 2
        },
        {
          "id": 3,
          "body": "関数 push は，引数で与えられた整数をスタックに格納する。格納できた場合は true を返し，格納できなかった場合は false を返す。 \n関数 pop は，スタックから値を取り出して返す。スタックが空のときは未定義の値 を返す。 \nスタックを，要素数が 4 である大域の整数型の配列 stack，及び次に値を格納する 位置を示す大域の変数 stackPos で表現する。スタックの初期状態を図に示す。 プログラムでは，配列の領域外を参照してはならないものとする。\n\n〔プログラム〕 \n大域: 整数型: stackPos ← 3 \n大域: 整数型の配列: stack ← {4, 3, 未定義の値, 未定義の値} \n\n○論理型: push(整数型: inputData) \n if (stackPos ≦ stackの要素数) \n stack[ ] ← inputData   \na\n stackPos ← stackPos ＋ 1 \n return true \nelse \n return false \n endif \n\n○整数型: pop() \n 整数型: popData ← 未定義の値 \n if (stackPos ＞ 1) \n stackPos ← \nb \n popData ← stack[stackPos]  \n stack[stackPos] ← 未定義の値 \nendif \n return popData",
          "choices": [
            {
              "text": "ア: a: stackPos, b: stackPos ＋ 1",
              "explanation": "不正解。条件に合致しません。"
            },
            {
              "text": "イ: a: stackPos, b: stackPos － 1",
              "explanation": "正解。条件に合致します。"
            },
            {
              "text": "ウ: a: stackPos － 1, b: stackPos ＋ 1",
              "explanation": "不正解。条件に合致しません。"
            },
            {
              "text": "エ: a: stackPos － 1, b: stackPos － 1",
              "explanation": "不正解。条件に合致しません。"
            }
          ],
          "correctChoiceIndex": 1
        },
        {
          "id": 4,
          "body": "関数 search は，二つの文字型の配列を，それぞれ引数 data 及び key で受け取り， data から，key の要素の並びと同じ並びを全て探し，その先頭の要素番号を全て格納 した配列を返す。見つからなければ，要素数 0 の配列を返す。 \n関数 search を search({\"a\", \"b\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\"}, {\"a\", \"b\",  \"c\"}) として呼び出すと，/*** β ***/の行の条件式が真となる回数は 回である。\n\n〔プログラム〕 \n/* keyは，要素数1以上の配列である */ \n○整数型の配列: search(文字型の配列: data, 文字型の配列: key)  整数型: i, j, lenData, lenKey \n 整数型の配列: result ← {} // 要素数0の配列 \n lenData ← dataの要素数 \n lenKey ← keyの要素数 \n\n /* (lenData － lenKey ＋ 1) が0以下のときは繰返し処理を実行しない */  for (i を 1 から (lenData － lenKey ＋ 1) まで 1 ずつ増やす)  for (j を 1 から lenKey まで 1 ずつ増やす) // α \n if (data[i ＋ j － 1] が key[j] と等しい) /*** β ***/  if (j が lenKey と等しい) \n resultの末尾 に iの値 を追加する \n endif \n else \n αの行から始まる繰返し処理を終了する \n endif \n endfor \n endfor \n return result",
          "choices": [
            {
              "text": "ア: 1",
              "explanation": "不正解。条件に合致しません。"
            },
            {
              "text": "イ: 2",
              "explanation": "不正解。条件に合致しません。"
            },
            {
              "text": "ウ: 3",
              "explanation": "正解。条件に合致します。"
            },
            {
              "text": "エ: 4",
              "explanation": "不正解。条件に合致しません。"
            },
            {
              "text": "オ: 5",
              "explanation": "不正解。条件に合致しません。"
            },
            {
              "text": "カ: 6",
              "explanation": "不正解。条件に合致しません。"
            },
            {
              "text": "キ: 7",
              "explanation": "不正解。条件に合致しません。"
            },
            {
              "text": "ク: 8",
              "explanation": "不正解。条件に合致しません。"
            },
            {
              "text": "ケ: 9",
              "explanation": "不正解。条件に合致しません。"
            },
            {
              "text": "コ: 10",
              "explanation": "不正解。条件に合致しません。"
            }
          ],
          "correctChoiceIndex": 2
        },
        {
          "id": 5,
          "body": "予防接種の病気 X に対する予防効果を調査するために集めたデータの集計結果を基 に，病気 X にかかるかどうかが，予防接種の有無に影響されないと仮定した場合の人 数を計算する。この人数を理論度数という。表 1 に集計結果の例を示し，表 2 に表 1 を基に計算した理論度数を示す。 \n関数 f は，引数 data で受け取った集計結果を基に計算した理論度数を返す。引数 と戻り値は二次元配列で，その行が表の行，その列が表の列に対応する。\n\n〔プログラム〕 \n○実数型の二次元配列: f(実数型の二次元配列: data)  実数型: t ← dataの要素の和 \n 整数型: row ← dataの行数 \n 整数型: col ← dataの列数 \n 実数型の二次元配列: result ← {row行col列の 未定義の値}  整数型: r, c \n for (r を 1 から row まで 1 ずつ増やす) \n for (c を 1 から col まで 1 ずつ増やす) \n result[r, c] ← (dataの行番号rの要素の和) ×  (dataの列番号cの要素の和) ÷ t  endfor \n endfor \n return result",
          "choices": [
            {
              "text": "ア: a: 44, b: 33",
              "explanation": "不正解。条件に合致しません。"
            },
            {
              "text": "イ: a: 58, b: 8",
              "explanation": "不正解。条件に合致しません。"
            },
            {
              "text": "ウ: a: 70, b: 7",
              "explanation": "正解。条件に合致します。"
            },
            {
              "text": "エ: a: 75, b: 2",
              "explanation": "不正解。条件に合致しません。"
            },
            {
              "text": "オ: a: 80, b: 6",
              "explanation": "不正解。条件に合致しません。"
            },
            {
              "text": "カ: a: 80, b: 8",
              "explanation": "不正解。条件に合致しません。"
            },
            {
              "text": "キ: a: 82, b: 6",
              "explanation": "不正解。条件に合致しません。"
            }
          ],
          "correctChoiceIndex": 2
        },
        {
          "id": 6,
          "body": "A 社は従業員 200 名の電子機器メーカーである。東京に本社があり，新潟に工場が ある。 \nA 社では，ファイルサーバを図 1 のように運用している。\n\nA 社は ISMS 認証を取得しており，最高情報セキュリティ責任者（CISO）を中心に 情報セキュリティに取り組み，定期的に，情報セキュリティリスクアセスメントを行 っている。今般，ISMS 認証基準が JIS Q 27001:2023 に改正されたことを受け，情報 セキュリティリーダーの B さんは，新基準への移行審査に向けて準備することになっ た。改正によって新たに追加された情報セキュリティ管理策について，B さんは情報 システム部の担当者に取組状況を確認し，その評価結果を表 1 にまとめた。\n\n表 1 B さんの評価結果（抜粋） \n| 項番  | 情報セキュリティ管理策  | 評価結果 |\n| :---: | ----- | ----- |\n| 1  | （事業継続のための ICT の備え）事業継続の目的及び ICT 継続の 要求事項に基づいて，ICT の備えを計画し，実施し，維持し，試 験しなければならない。 | 実施している |\n\nB さんは，移行審査前の内部監査で，内部監査室から表 1 の項番 1 に関するファイ ルサーバの運用について何点か質問を受け，表 2 のとおり回答した。\n\n表 2 内部監査室への B さんの回答（抜粋） \n| 項番  | B さんの回答 |\n| :---: | ----- |\n| 1  | 例えば，金曜日の正午に障害が発生した場合，少なくとも の時点のデ  a1 ータは復元しなければならない。  |\n| 2  | 例えば，木曜日の正午に障害が発生し，ファイルサーバの全データが消失したとす ると，バックアップからのリストアには 時間掛かると予想される。  a2 |\n| 3  | ICT 継続の計画書は， が承認している。  a3 |\n\n設問 表 2 中の ～ に入れる字句の適切な組合せを，a に関す a1 a3\nる解答群の中から選べ。",
          "choices": [
            {
              "text": "ア: a1: 月曜日の正午, a2: 4.25, a3: CISO",
              "explanation": "不正解。条件に合致しません。"
            },
            {
              "text": "イ: a1: 月曜日の正午, a2: 4.25, a3: 情報システム部の担当者",
              "explanation": "不正解。条件に合致しません。"
            },
            {
              "text": "ウ: a1: 月曜日の正午, a2: 4.25, a3: 内部監査室長",
              "explanation": "不正解。条件に合致しません。"
            },
            {
              "text": "エ: a1: 月曜日の正午, a2: 4.50, a3: CISO",
              "explanation": "不正解。条件に合致しません。"
            },
            {
              "text": "オ: a1: 月曜日の正午, a2: 4.50, a3: 情報システム部の担当者",
              "explanation": "不正解。条件に合致しません。"
            },
            {
              "text": "カ: a1: 火曜日の正午, a2: 4.25, a3: 情報システム部の担当者",
              "explanation": "不正解。条件に合致しません。"
            },
            {
              "text": "キ: a1: 火曜日の正午, a2: 4.25, a3: 内部監査室長",
              "explanation": "不正解。条件に合致しません。"
            },
            {
              "text": "ク: a1: 火曜日の正午, a2: 4.50, a3: CISO",
              "explanation": "不正解。条件に合致しません。"
            },
            {
              "text": "ケ: a1: 火曜日の正午, a2: 4.50, a3: 情報システム部の担当者",
              "explanation": "不正解。条件に合致しません。"
            },
            {
              "text": "コ: a1: 火曜日の正午, a2: 4.50, a3: 内部監査室長",
              "explanation": "正解。条件に合致します。"
            }
          ],
          "correctChoiceIndex": 9
        }
  ]